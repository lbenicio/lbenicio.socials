<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithms on Leonardo Benicio</title><link>https://lbenicio.dev/tags/algorithms/</link><description>Recent content in Algorithms on Leonardo Benicio</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 27 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://lbenicio.dev/tags/algorithms/index.xml" rel="self" type="application/rss+xml"/><item><title>The Quiet Calculus of Probabilistic Commutativity</title><link>https://lbenicio.dev/blog/the-quiet-calculus-of-probabilistic-commutativity/</link><pubDate>Sat, 27 Sep 2025 00:00:00 +0000</pubDate><guid>https://lbenicio.dev/blog/the-quiet-calculus-of-probabilistic-commutativity/</guid><description>&lt;h2 id="abstract"&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Eventual consistency dominates many internet-scale systems, but reasoning about concurrency under minimal coordination remains ad hoc. This post introduces &amp;ldquo;probabilistic commutativity&amp;rdquo; — a lightweight calculus for reasoning about whether concurrent operations, under reasonable stochastic assumptions about ordering and visibility delays, are likely to commute in practice. Probabilistic commutativity offers an intermediate lens between strict algebraic commutativity and empirical test-driven guarantees, enabling low-overhead coordination strategies and probabilistic correctness arguments for producing practically consistent distributed services.&lt;/p&gt;</description></item><item><title>Algorithm Design</title><link>https://lbenicio.dev/reading/algorithm-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lbenicio.dev/reading/algorithm-design/</guid><description>&lt;p&gt;A practical approach to algorithm design with emphasis on design paradigms and proofs of correctness.&lt;/p&gt;</description></item><item><title>Algorithms</title><link>https://lbenicio.dev/reading/algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lbenicio.dev/reading/algorithms/</guid><description>&lt;p&gt;An accessible algorithms textbook with strong intuition and mathematical clarity.&lt;/p&gt;</description></item><item><title>Algorithms (4th ed.)</title><link>https://lbenicio.dev/reading/algorithms-4th-ed./</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lbenicio.dev/reading/algorithms-4th-ed./</guid><description>&lt;p&gt;A comprehensive introduction to algorithms with Java implementations and extensive online resources.&lt;/p&gt;</description></item><item><title>Introduction to Algorithms (3rd ed.)</title><link>https://lbenicio.dev/reading/introduction-to-algorithms-3rd-ed./</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lbenicio.dev/reading/introduction-to-algorithms-3rd-ed./</guid><description>&lt;p&gt;A comprehensive and rigorous textbook covering algorithms and data structures, widely used in CS curricula.&lt;/p&gt;</description></item><item><title>Introduction to Parallel Computing (2nd ed.)</title><link>https://lbenicio.dev/reading/introduction-to-parallel-computing-2nd-ed./</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lbenicio.dev/reading/introduction-to-parallel-computing-2nd-ed./</guid><description>&lt;p&gt;A comprehensive textbook on models, algorithms, and performance analysis for parallel computing.&lt;/p&gt;</description></item><item><title>The Art of Computer Programming, Vols. 1–4A</title><link>https://lbenicio.dev/reading/the-art-of-computer-programming-vols.-14a/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lbenicio.dev/reading/the-art-of-computer-programming-vols.-14a/</guid><description>&lt;p&gt;Foundational multi-volume work on algorithms, data structures, and analysis of algorithms.&lt;/p&gt;</description></item></channel></rss>